import os
import random
import string
import m3u8
from datetime import datetime

# ЁЯОп .txt рдлрд╝рд╛рдЗрд▓ рд╕реЗ рдЗрдирдкреБрдЯ рд▓реЗрдиреЗ рдХрд╛ рдлрд╝рдВрдХреНрд╢рди
def read_input_from_file(filename):
    try:
        with open(filename, "r") as file:
            lines = file.read().strip().split("\n")
            video_link = lines[0]
            audio_link = lines[1] if len(lines) > 1 else None
            encryption_key = lines[2] if len(lines) > 2 else None
            return video_link, audio_link, encryption_key
    except Exception as e:
        print(f"тЭМ Error reading file: {e}")
        return None, None, None

# ЁЯОп рдпреВрдЬрд╝рд░ рд╕реЗ рдЗрдирдкреБрдЯ рд▓реЗрдВ (рдпрд╛ .txt рдлрд╝рд╛рдЗрд▓ рд╕реЗ)
file_input = input("ЁЯУД Enter .txt file path (or press Enter to enter manually): ").strip()
if file_input:
    video_link, audio_link, encryption_key = read_input_from_file(file_input)
else:
    video_link = input("ЁЯОе Enter M3U8 video link: ").strip()
    audio_link = input("ЁЯО╡ Enter M3U8 audio link (if available): ").strip()
    encryption_key = input("ЁЯФС Enter the decryption key: ").strip()

current_time = datetime.now().strftime("%H%M%S")
video_iv = ""

# ЁЯУМ M3U8 рд╕реЗ TS рдлрд╛рдЗрд▓реЗрдВ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рдиреЗ рдХрд╛ рдлрд╝рдВрдХреНрд╢рди
def download_ts_files(link, is_audio):
    global video_iv
    playlist = m3u8.load(link)
    ts_len = len(playlist.segments)
    
    root_video_link = "/".join(link.split("/")[:-1])+"/"
    ts_filename = f"{current_time}.ts" if not is_audio else f"{current_time}_audio.ts"
    
    for i in range(ts_len):
        segment_info = str(playlist.segments[i]).split(",")
        video_iv = segment_info[2].replace("IV=0x", "").split("\n")[0]
        ts_file = segment_info[3].replace("\n", "")

        os.system(f"wget {root_video_link}{ts_file} -O ->> {ts_filename}")

# ЁЯУМ TS рдлрд╛рдЗрд▓ рдбрд┐рдХреНрд░рд┐рдкреНрдЯ рдХрд░рдиреЗ рдХрд╛ рдлрд╝рдВрдХреНрд╢рди
def decrypt_ts(filename, is_audio):
    decrypted_filename = "decrypted.mkv" if not is_audio else "decrypted.aac"
    os.system(f"openssl enc -aes-128-cbc -nosalt -d -in {filename}.ts -K '{encryption_key}' -iv '{video_iv}' > {decrypted_filename}")

# ЁЯУМ рд╡реАрдбрд┐рдпреЛ рдФрд░ рдСрдбрд┐рдпреЛ рдХреЛ рдорд░реНрдЬ рдХрд░рдиреЗ рдХрд╛ рдлрд╝рдВрдХреНрд╢рди
def merge_audio_video():
    output_filename = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6)) + ".mp4"
    os.system(f"ffmpeg -i decrypted.mkv -i decrypted.aac -c copy {output_filename}")
    
    # рдХреНрд▓реАрдирдЕрдк (рдЕрдирд╛рд╡рд╢реНрдпрдХ рдлрд╛рдЗрд▓реЗрдВ рд╣рдЯрд╛рдПрдВ)
    os.system(f"rm decrypted.mkv decrypted.aac {current_time}.ts {current_time}_audio.ts")
    print(f"тЬЕ рд╡реАрдбрд┐рдпреЛ рд╕реЗрд╡ рд╣реЛ рдЧрдпрд╛: {output_filename}")

# ЁЯУМ рдкреВрд░рд╛ рдкреНрд░реЛрд╕реЗрд╕ рд░рди рдХрд░рдирд╛
if video_link and encryption_key:
    download_ts_files(video_link, False)
    decrypt_ts(current_time, False)

if audio_link:
    download_ts_files(audio_link, True)
    decrypt_ts(current_time+"_audio", True)
    merge_audio_video()
else:
    print("ЁЯОе Video downloaded without audio!")
